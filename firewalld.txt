# Replace eth0 with your external network interface
firewall-cmd --permanent --zone=public --add-masquerade

# Reload firewalld to apply the changes
firewall-cmd --reload



_-----------------------




Basic firewall commands
	current State 
		# firewall-cmd --state

	check Zones 
		# firewall-cmd --get-zones

		# ls /usr/lib/firewalld/zones
 
	default Zones
		# firewall-cmd --get-default-zone 

	active zone with Iterface 
		# firewall-cmd --get-active-zones
	
	list all rule of active Zone
		# firewall-cmd --list-all

		[osboxes@localhost ~]$ firewall-cmd --zone=public --list-all
			public (active)
 				 target: default
 				 icmp-block-inversion: no
 				 interfaces: ens160
				 sources: 
 				 services: cockpit dhcpv6-client telnet
				 ports: 
				 protocols: 
 				 forward: yes
				 masquerade: no
 				 forward-ports: 
				 source-ports: 
 				 icmp-blocks: 
 				 rich rules: 
	
	list all rules of zones that we want to see
		# firewall-cmd --zone=dmz --list-all
	
	change the interface of the Zonex
		# firewall-cmd --zone=dmz --change-interface=ens33
		# firewall-cmd --zone=dmz --add-interface=ens33
		# firewall-cmd --zone=dmz --remove-interface=ens33
		# firewall-cmd --zone=dmz --list-interface
	
	
	make Permanent 
		# firewall-cmd --zone=dmz --change-interface=ens33
		# anything and then --permanet
		# firewall-cmd --reload	
	
	create new Zone
		# firewall-cmd --new-zone=hpcsa --permanent 
		# firewall-cmd --reload

		# firewall-cmd --set-default-zone=hpcsa
		# firewall-cmd --reload
		
		# firewall-cmd --add-interface=ens33 --permanent
		# firewall-cmd  --delete-zone=hpcsa --permanet

	add or remove Services 
		# firewall-cmd --zone=public --add-service=ssh --permanent
		# firewall-cmd --zone=public --add-service={http,https} --permanent
		
		# firewall-cmd --zone=public --remove-service=ssh --permanent
		# firewall-cmd --zone=public --remove-service={http,https} --permanent

	add or remove Port
		# firewall-cmd --zone=public --add-port=2020/tcp --permanent
		# firewall-cmd --zone=public --add-port=8080/udp --add-port=4040/tcp --permanent

		# firewall-cmd --zone=public --remove-port=2020/tcp --permanent
		# firewall-cmd --zone=public --remove-port=8080/udp --add-port=4040/tcp --permanent





Rich Rules: 
	
	accept , reject or drop particular system or IP 
		
	# firewall-cmd --zone=public --add-rich-rule='rule family="ipv4" source address="192.168.91.102/32" reject' --permanent
											IP / IP range       accept or drop
	#  firewall-cmd --reload
	
	# firewall-cmd --zone=public --add-rich-rule='rule family="ipv4" source address="192.168.91.102/32" service name="ssh" reject' --permanent
											IP / IP range           services name  accept or drop      
	   


	# firewall-cmd --zone=public 
		--add-rich-rule=                            
		'rule					    			: starting of rule
		family="ipv4"                           : ipv4 or ipv6
		source address="192.168.91.102/32"      : ip or range of ip
		service name="ssh"			    		: telnet , ssh , http
		limit value="1/m" 			    		: 1 per minute or hour sec 
		accept'                                 : drop , accept or reject   & end of rule
		--permanent
		
		
		
		



Panic mode : 
	# firewall-cmd --panic-on

	# firewall-cmd --panic-off

















Wireshark :
```````````
Logical operator:
``````````````````
1. and or && : Logical AND [ all the condition should match ]
2. or or ||  : Logical OR [Either all or one should match ]
3. xor or ^^ : Logical XOR [ Exclusive alteration - only one of the two condition match not both]
4. not or ! : Not [ Not equal to ]

Filtering packets [display filter]:
```````````````````````````````````
eq or == : equal [ ip.dst == x.x.x.x ]
ne or != : Not equal [ ip.dst != x.x.x.x ]
gt or >  : Greater than [ frame.len > 10 ]
it or <  : less than [ frame.len < 10 ]
ge or >=  : Greater than or equal [ frame.len >= 10 ]
le or <=  : Less than or equal [ frame.len <= 10 ]

Common filtering commands:
``````````````````````````
Filter by IP:
`````````````
ip.addr == x.x.x.x

filter by dst IP:
`````````````````
ip.dst == x.x.x.x

Filter by source IP:
````````````````````
ip.src == x.x.x.x

Filter by IP range:
````````````````````
ip.addr >= x.x.x.1 and ip.addr <= x.x.x.100

Filter by multiple IPs:
```````````````````````
ip.addr == x.x.x.1 && ip.addr == x.x.x.100

Filter by subnet:
`````````````````
ip.addr == 10.0.0.0/24

Filter by port:
````````````````
tcp.port == 25

Filter by dst port:
`````````````````````
tcp.dstport == 23

Filter by IP addr and port:
```````````````````````````
ip.addr == x.x.x.x and tcp.port == 25

Filter by URL:
``````````````
http.host == "hostname"

Filter by SYN flag:
```````````````````
tcp.flags.syn == 1
tcp.flags.syn == 1 and tcp.flags.ack == 0





WIRESHARK 




TCPDUMP

tcpdump is a most powerful and widely used command-line packets sniffer or package analyzer tool which is used to capture or filter TCP/IP packets that are received or transferred over a network on a specific interface.

How to Install tcpdump in Linux
``````````
# apt install tcpdump  [On Debian, Ubuntu]
# yum install tcpdump  [On RHEL/CentOS/Fedora]


	1. Capture Packets from Specific Interface
	``````````````````````````````````````````
	# tcpdump -i ens33


	2. Capture Only N Number of Packets
	````````````````````````````````````
	# tcpdump -c 5 -i ens33


	3. Print Captured Packets in ASCII
	```````````````````````````````````
	# tcpdump -A -i ens33


	4. Display Available Interfaces
	````````````````````````````````
	# tcpdump -D


	5. Display Captured Packets in HEX and ASCII
	`````````````````````````````````````````````
	# tcpdump -XX -i ens33


	6. Capture and Save Packets in a File
	``````````````````````````````````````
	# tcpdump -w 0001.pcap -i ens33


	7. Read Captured Packets File
	`````````````````````````````
	# tcpdump -r 0001.pcap


	8. Capture IP Address Packets
	``````````````````````````````
	# tcpdump -n -i ens33


	9. Capture only TCP Packets
	````````````````````````````
	# tcpdump -i ens33 tcp


	10. Capture Packet from Specific Port
	`````````````````````````````````````
	# tcpdump -i ens33 port 22


	11. Capture Packets from source IP
	``````````````````````````````````
	# tcpdump -i ens33 src x.x.x.x


	12. Capture Packets from destination IP
	````````````````````````````````````````
	# tcpdump -i eth0 dst x.x.x.x


	13. Capture all packets in any interface
	`````````````````````````````````````````
	# tcpdump -i any


	14. Capture specific host
	``````````````````````````
	# tcpdump -i ens33 host x.x.x.x


	15. Complex expressions
	````````````````````````
	# tcpdump -i lo src 127.0.0.1 and port 80

	# tcpdump -i lo "port 80 and (src x.x.x.x or src x.x.x.x)"













